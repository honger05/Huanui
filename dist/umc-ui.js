(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jQuery"));
	else if(typeof define === 'function' && define.amd)
		define(["jQuery"], factory);
	else if(typeof exports === 'object')
		exports["Umc"] = factory(require("jQuery"));
	else
		root["Umc"] = factory(root["jQuery"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_jquery__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/components/core/aspect.js":
/*!***************************************!*\
  !*** ./src/components/core/aspect.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Aspect = {};\n\n// 在指定方法执行前，先执行 callback\nAspect.before = function(methodName, callback, context) {\n  return weave.call(this, 'before', methodName, callback, context);\n};\n\n// 在指定方法执行后，再执行 callback\nAspect.after = function(methodName, callback, context) {\n  return weave.call(this, 'after', methodName, callback, context);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Aspect);\n\n// Helpers\n// -------\nvar eventSplitter = /\\s+/;\n\nfunction weave(when, methodName, callback, context) {\n  var names = methodName.split(eventSplitter);\n  var name, method;\n\n  while (name = names.shift()) {\n    method = getMethod(this, name);\n    if (!method.__isAspected) {\n      wrap.call(this, name);\n    }\n    this.on(when + ':' + name, callback, context);\n  }\n\n  return this;\n}\n\nfunction getMethod(host, methodName) {\n  var method = host[methodName];\n  if (!method) {\n    throw new Error('Invalid method name: ' + methodName);\n  }\n  return method;\n}\n\nfunction wrap(methodName) {\n  var old = this[methodName];\n\n  this[methodName] = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var beforeArgs = ['before:' + methodName].concat(args);\n\n    // prevent if trigger return false\n    if (this.trigger.apply(this, beforeArgs) === false) return;\n\n    var ret = old.apply(this, arguments);\n    var afterArgs = ['after:' + methodName, ret].concat(args);\n    this.trigger.apply(this, afterArgs);\n\n    return ret;\n  };\n\n  this[methodName].__isAspected = true;\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/core/aspect.js?");

/***/ }),

/***/ "./src/components/core/attribute.js":
/*!******************************************!*\
  !*** ./src/components/core/attribute.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Attribute = {};\n\n// 负责 attributes 的初始化\n// attributes 是与实例相关的状态信息，可读可写，发生变化时，会自动触发相关事件\nAttribute.initAttrs = function(config) {\n  // initAttrs 是在初始化时调用的，默认情况下实例上肯定没有 attrs，不存在覆盖问题\n  var attrs = this.attrs = {};\n\n  // Get all inherited attributes.\n  var specialProps = this.propsInAttrs || [];\n  mergeInheritedAttrs(attrs, this, specialProps);\n\n  // Merge user-specific attributes from config.\n  if (config) {\n    mergeUserValue(attrs, config);\n  }\n\n  // 对于有 setter 的属性，要用初始值 set 一下，以保证关联属性也一同初始化\n  setSetterAttrs(this, attrs, config);\n\n  // Convert `on/before/afterXxx` config to event handler.\n  parseEventsFromAttrs(this, attrs);\n\n  // 将 this.attrs 上的 special properties 放回 this 上\n  copySpecialProps(specialProps, this, attrs, true);\n};\n\n\n// Get the value of an attribute.\nAttribute.get = function(key) {\n  var attr = this.attrs[key] || {};\n  var val = attr.value;\n  return attr.getter ? attr.getter.call(this, val, key) : val;\n};\n\n\n// Set a hash of model attributes on the object, firing `\"change\"` unless\n// you choose to silence it.\nAttribute.set = function(key, val, options) {\n  var attrs = {};\n\n  // set(\"key\", val, options)\n  if (isString(key)) {\n    attrs[key] = val;\n  }\n  // set({ \"key\": val, \"key2\": val2 }, options)\n  else {\n    attrs = key;\n    options = val;\n  }\n\n  options || (options = {});\n  var silent = options.silent;\n  var override = options.override;\n\n  var now = this.attrs;\n  var changed = this.__changedAttrs || (this.__changedAttrs = {});\n\n  for (key in attrs) {\n    if (!attrs.hasOwnProperty(key)) continue;\n\n    var attr = now[key] || (now[key] = {});\n    val = attrs[key];\n\n    if (attr.readOnly) {\n      throw new Error('This attribute is readOnly: ' + key);\n    }\n\n    // invoke setter\n    if (attr.setter) {\n      val = attr.setter.call(this, val, key);\n    }\n\n    // 获取设置前的 prev 值\n    var prev = this.get(key);\n\n    // 获取需要设置的 val 值\n    // 如果设置了 override 为 true，表示要强制覆盖，就不去 merge 了\n    // 都为对象时，做 merge 操作，以保留 prev 上没有覆盖的值\n    if (!override && isPlainObject(prev) && isPlainObject(val)) {\n      val = merge(merge({}, prev), val);\n    }\n\n    // set finally\n    now[key].value = val;\n\n    // invoke change event\n    // 初始化时对 set 的调用，不触发任何事件\n    if (!this.__initializingAttrs && !isEqual(prev, val)) {\n      if (silent) {\n        changed[key] = [val, prev];\n      }\n      else {\n        this.trigger('change:' + key, val, prev, key);\n      }\n    }\n  }\n\n  return this;\n};\n\n\n// Call this method to manually fire a `\"change\"` event for triggering\n// a `\"change:attribute\"` event for each changed attribute.\nAttribute.change = function() {\n  var changed = this.__changedAttrs;\n\n  if (changed) {\n    for (var key in changed) {\n      if (changed.hasOwnProperty(key)) {\n        var args = changed[key];\n        this.trigger('change:' + key, args[0], args[1], key);\n      }\n    }\n    delete this.__changedAttrs;\n  }\n\n  return this;\n};\n\n// for test\nAttribute._isPlainObject = isPlainObject;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Attribute);\n\n// Helpers\n// -------\n\nvar toString = Object.prototype.toString;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * Detect the JScript [[DontEnum]] bug:\n * In IE < 9 an objects own properties, shadowing non-enumerable ones, are\n * made non-enumerable as well.\n * https://github.com/bestiejs/lodash/blob/7520066fc916e205ef84cb97fbfe630d7c154158/lodash.js#L134-L144\n */\n/** Detect if own properties are iterated after inherited properties (IE < 9) */\nvar iteratesOwnLast;\n(function() {\n  var props = [];\n  function Ctor() { this.x = 1; }\n  Ctor.prototype = { 'valueOf': 1, 'y': 1 };\n  for (var prop in new Ctor()) { props.push(prop); }\n  iteratesOwnLast = props[0] !== 'x';\n}());\n\nvar isArray = Array.isArray || function(val) {\n  return toString.call(val) === '[object Array]';\n};\n\nfunction isString(val) {\n  return toString.call(val) === '[object String]';\n}\n\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\nfunction isWindow(o) {\n  return o != null && o == o.window;\n}\n\nfunction isPlainObject(o) {\n  // Must be an Object.\n  // Because of IE, we also have to check the presence of the constructor\n  // property. Make sure that DOM nodes and window objects don't\n  // pass through, as well\n  if (!o || toString.call(o) !== \"[object Object]\" ||\n      o.nodeType || isWindow(o)) {\n    return false;\n  }\n\n  try {\n    // Not own constructor property must be Object\n    if (o.constructor &&\n        !hasOwn.call(o, \"constructor\") &&\n        !hasOwn.call(o.constructor.prototype, \"isPrototypeOf\")) {\n      return false;\n    }\n  } catch (e) {\n    // IE8,9 Will throw exceptions on certain host objects #9897\n    return false;\n  }\n\n  var key;\n\n  // Support: IE<9\n  // Handle iteration over inherited properties before own properties.\n  // http://bugs.jquery.com/ticket/12199\n  if (iteratesOwnLast) {\n    for (key in o) {\n      return hasOwn.call(o, key);\n    }\n  }\n\n  // Own properties are enumerated firstly, so to speed up,\n  // if last one is own, then all properties are own.\n  for (key in o) {}\n\n  return key === undefined || hasOwn.call(o, key);\n}\n\nfunction isEmptyObject(o) {\n  if (!o || toString.call(o) !== \"[object Object]\" ||\n      o.nodeType || isWindow(o) || !o.hasOwnProperty) {\n    return false;\n  }\n\n  for (var p in o) {\n    if (o.hasOwnProperty(p)) return false;\n  }\n  return true;\n}\n\nfunction merge(receiver, supplier) {\n  var key, value;\n\n  for (key in supplier) {\n    if (supplier.hasOwnProperty(key)) {\n      receiver[key] = cloneValue(supplier[key], receiver[key]);\n    }\n  }\n\n  return receiver;\n}\n\n// 只 clone 数组和 plain object，其他的保持不变\nfunction cloneValue(value, prev){\n  if (isArray(value)) {\n    value = value.slice();\n  }\n  else if (isPlainObject(value)) {\n    isPlainObject(prev) || (prev = {});\n\n    value = merge(prev, value);\n  }\n\n  return value;\n}\n\nvar keys = Object.keys;\n\nif (!keys) {\n  keys = function(o) {\n    var result = [];\n\n    for (var name in o) {\n      if (o.hasOwnProperty(name)) {\n        result.push(name);\n      }\n    }\n    return result;\n  };\n}\n\nfunction mergeInheritedAttrs(attrs, instance, specialProps) {\n  var inherited = [];\n  var proto = instance.constructor.prototype;\n\n  while (proto) {\n    // 不要拿到 prototype 上的\n    if (!proto.hasOwnProperty('attrs')) {\n      proto.attrs = {};\n    }\n\n    // 将 proto 上的特殊 properties 放到 proto.attrs 上，以便合并\n    copySpecialProps(specialProps, proto.attrs, proto);\n\n    // 为空时不添加\n    if (!isEmptyObject(proto.attrs)) {\n      inherited.unshift(proto.attrs);\n    }\n\n    // 向上回溯一级\n    proto = proto.constructor.superclass;\n  }\n\n  // Merge and clone default values to instance.\n  for (var i = 0, len = inherited.length; i < len; i++) {\n    mergeAttrs(attrs, normalize(inherited[i]));\n  }\n}\n\nfunction mergeUserValue(attrs, config) {\n  mergeAttrs(attrs, normalize(config, true), true);\n}\n\nfunction copySpecialProps(specialProps, receiver, supplier, isAttr2Prop) {\n  for (var i = 0, len = specialProps.length; i < len; i++) {\n    var key = specialProps[i];\n\n    if (supplier.hasOwnProperty(key)) {\n      receiver[key] = isAttr2Prop ? receiver.get(key) : supplier[key];\n    }\n  }\n}\n\n\nvar EVENT_PATTERN = /^(on|before|after)([A-Z].*)$/;\nvar EVENT_NAME_PATTERN = /^(Change)?([A-Z])(.*)/;\n\nfunction parseEventsFromAttrs(host, attrs) {\n  for (var key in attrs) {\n    if (attrs.hasOwnProperty(key)) {\n      var value = attrs[key].value, m;\n\n      if (isFunction(value) && (m = key.match(EVENT_PATTERN))) {\n        host[m[1]](getEventName(m[2]), value);\n        delete attrs[key];\n      }\n    }\n  }\n}\n\n// Converts `Show` to `show` and `ChangeTitle` to `change:title`\nfunction getEventName(name) {\n  var m = name.match(EVENT_NAME_PATTERN);\n  var ret = m[1] ? 'change:' : '';\n  ret += m[2].toLowerCase() + m[3];\n  return ret;\n}\n\n\nfunction setSetterAttrs(host, attrs, config) {\n  var options = { silent: true };\n  host.__initializingAttrs = true;\n\n  for (var key in config) {\n    if (config.hasOwnProperty(key)) {\n      if (attrs[key].setter) {\n        host.set(key, config[key], options);\n      }\n    }\n  }\n\n  delete host.__initializingAttrs;\n}\n\n\nvar ATTR_SPECIAL_KEYS = ['value', 'getter', 'setter', 'readOnly'];\n\n// normalize `attrs` to\n//\n//   {\n//      value: 'xx',\n//      getter: fn,\n//      setter: fn,\n//      readOnly: boolean\n//   }\n//\nfunction normalize(attrs, isUserValue) {\n  var newAttrs = {};\n\n  for (var key in attrs) {\n    var attr = attrs[key];\n\n    if (!isUserValue &&\n        isPlainObject(attr) &&\n        hasOwnProperties(attr, ATTR_SPECIAL_KEYS)) {\n      newAttrs[key] = attr;\n      continue;\n    }\n\n    newAttrs[key] = {\n      value: attr\n    };\n  }\n\n  return newAttrs;\n}\n\nvar ATTR_OPTIONS = ['setter', 'getter', 'readOnly'];\n// 专用于 attrs 的 merge 方法\nfunction mergeAttrs(attrs, inheritedAttrs, isUserValue){\n  var key, value;\n  var attr;\n\n  for (key in inheritedAttrs) {\n    if (inheritedAttrs.hasOwnProperty(key)) {\n      value = inheritedAttrs[key];\n      attr = attrs[key];\n\n      if (!attr) {\n        attr = attrs[key] = {};\n      }\n\n      // 从严谨上来说，遍历 ATTR_SPECIAL_KEYS 更好\n      // 从性能来说，直接 人肉赋值 更快\n      // 这里还是选择 性能优先\n\n      // 只有 value 要复制原值，其他的直接覆盖即可\n      (value['value'] !== undefined) && (attr['value'] = cloneValue(value['value'], attr['value']));\n\n      // 如果是用户赋值，只要考虑value\n      if (isUserValue) continue;\n\n      for (var i in ATTR_OPTIONS) {\n        var option = ATTR_OPTIONS[i];\n        if (value[option] !== undefined) {\n          attr[option] = value[option];\n        }\n      }\n    }\n  }\n\n  return attrs;\n}\n\nfunction hasOwnProperties(object, properties) {\n  for (var i = 0, len = properties.length; i < len; i++) {\n    if (object.hasOwnProperty(properties[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// 对于 attrs 的 value 来说，以下值都认为是空值： null, undefined, '', [], {}\nfunction isEmptyAttrValue(o) {\n  return o == null || // null, undefined\n      (isString(o) || isArray(o)) && o.length === 0 || // '', []\n      isEmptyObject(o); // {}\n}\n\n// 判断属性值 a 和 b 是否相等，注意仅适用于属性值的判断，非普适的 === 或 == 判断。\nfunction isEqual(a, b) {\n  if (a === b) return true;\n\n  if (isEmptyAttrValue(a) && isEmptyAttrValue(b)) return true;\n\n  // Compare `[[Class]]` names.\n  var className = toString.call(a);\n  if (className != toString.call(b)) return false;\n\n  switch (className) {\n\n    // Strings, numbers, dates, and booleans are compared by value.\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are\n      // equivalent; thus, `\"5\"` is equivalent to `new String(\"5\")`.\n      return a == String(b);\n\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive. An `equal`\n      // comparison is performed for other numeric values.\n      return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values.\n      // Dates are compared by their millisecond representations.\n      // Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a == +b;\n\n    // RegExps are compared by their source patterns and flags.\n    case '[object RegExp]':\n      return a.source == b.source &&\n          a.global == b.global &&\n          a.multiline == b.multiline &&\n          a.ignoreCase == b.ignoreCase;\n\n    // 简单判断数组包含的 primitive 值是否相等\n    case '[object Array]':\n      var aString = a.toString();\n      var bString = b.toString();\n\n      // 只要包含非 primitive 值，为了稳妥起见，都返回 false\n      return aString.indexOf('[object') === -1 &&\n          bString.indexOf('[object') === -1 &&\n          aString === bString;\n  }\n\n  if (typeof a != 'object' || typeof b != 'object') return false;\n\n  // 简单判断两个对象是否相等，只判断第一层\n  if (isPlainObject(a) && isPlainObject(b)) {\n\n    // 键值不相等，立刻返回 false\n    if (!isEqual(keys(a), keys(b))) {\n      return false;\n    }\n\n    // 键相同，但有值不等，立刻返回 false\n    for (var p in a) {\n      if (a[p] !== b[p]) return false;\n    }\n\n    return true;\n  }\n\n  // 其他情况返回 false, 以避免误判导致 change 事件没发生\n  return false;\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/core/attribute.js?");

/***/ }),

/***/ "./src/components/core/auto-render.js":
/*!********************************************!*\
  !*** ./src/components/core/auto-render.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar AutoRender = {};\n\nvar DATA_WIDGET_AUTO_RENDERED = 'data-widget-auto-rendered'\n\n// 自动渲染接口，子类可根据自己的初始化逻辑进行覆盖\nAutoRender.autoRender = function(config) {\n  return new this(config).render()\n}\n\n// 根据 data-widget 属性，自动渲染所有开启了 data-api 的 widget 组件\nAutoRender.autoRenderAll = function(root, callback) {\n  if (typeof root === 'function') {\n    callback = root\n    root = null\n  }\n\n  root = jquery__WEBPACK_IMPORTED_MODULE_0___default()(root || document.body)\n  var modules = []\n  var elements = []\n\n  root.find('[data-widget]').each(function(i, element) {\n    if (!AutoRender.isDataApiOff(element)) {\n      modules.push(element.getAttribute('data-widget').toLowerCase())\n      elements.push(element)\n    }\n  })\n\n  if (modules.length) {\n    seajs.use(modules, function() {\n\n      for (var i = 0; i < arguments.length; i++) {\n        var SubWidget = arguments[i]\n        var element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(elements[i])\n\n        // 已经渲染过\n        if (element.attr(DATA_WIDGET_AUTO_RENDERED)) continue\n\n        var config = {\n          initElement: element,\n          renderType: 'auto'\n        };\n\n        // data-widget-role 是指将当前的 DOM 作为 role 的属性去实例化，默认的 role 为 element\n        var role = element.attr('data-widget-role')\n        config[role ? role : 'element'] = element\n\n        // 调用自动渲染接口\n        SubWidget.autoRender && SubWidget.autoRender(config)\n\n        // 标记已经渲染过\n        element.attr(DATA_WIDGET_AUTO_RENDERED, 'true')\n      }\n\n      // 在所有自动渲染完成后，执行回调\n      callback && callback()\n    })\n  }\n}\n\nvar isDefaultOff = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).attr('data-api') === 'off'\n\n// 是否没开启 data-api\nAutoRender.isDataApiOff = function(element) {\n  var elementDataApi = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).attr('data-api')\n\n  // data-api 默认开启，关闭只有两种方式：\n  //  1. element 上有 data-api=\"off\"，表示关闭单个\n  //  2. document.body 上有 data-api=\"off\"，表示关闭所有\n  return  elementDataApi === 'off' ||\n      (elementDataApi !== 'on' && isDefaultOff)\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoRender);\n\n\n//# sourceURL=webpack://Umc/./src/components/core/auto-render.js?");

/***/ }),

/***/ "./src/components/core/base.js":
/*!*************************************!*\
  !*** ./src/components/core/base.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./class */ \"./src/components/core/class.js\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ \"./src/components/core/events.js\");\n/* harmony import */ var _aspect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./aspect */ \"./src/components/core/aspect.js\");\n/* harmony import */ var _attribute__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./attribute */ \"./src/components/core/attribute.js\");\n// Base 是一个基础类，提供 Class、Events、Attrs 和 Aspect 支持。\n\n\n\n\n\nvar Base = _class__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n  Implements: [_events__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _aspect__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _attribute__WEBPACK_IMPORTED_MODULE_3__[\"default\"]],\n\n  initialize: function(config) {\n    this.initAttrs(config);\n\n    // Automatically register `this._onChangeAttr` method as\n    // a `change:attr` event handler.\n    parseEventsFromInstance(this, this.attrs);\n  },\n\n  destroy: function() {\n    this.off();\n\n    for (var p in this) {\n      if (this.hasOwnProperty(p)) {\n        delete this[p];\n      }\n    }\n\n    // Destroy should be called only once, generate a fake destroy after called\n    // https://github.com/aralejs/widget/issues/50\n    this.destroy = function() {};\n  }\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Base);\n\nfunction parseEventsFromInstance(host, attrs) {\n  for (var attr in attrs) {\n    if (attrs.hasOwnProperty(attr)) {\n      var m = '_onChange' + ucfirst(attr);\n      if (host[m]) {\n        host.on('change:' + attr, host[m]);\n      }\n    }\n  }\n}\n\nfunction ucfirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/core/base.js?");

/***/ }),

/***/ "./src/components/core/class.js":
/*!**************************************!*\
  !*** ./src/components/core/class.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\nfunction Class (o) {\n  if (!(this instanceof Class) && isFunction(o)) {\n    return classify(o)\n  }\n}\n\nClass.create = function (parent, properties) {\n  if (!isFunction(parent)) {\n    properties = parent\n    parent = null\n  }\n\n  properties || (properties = {})\n  parent || (parent = properties.Extends || Class)\n  properties.Extends = parent\n\n  function SubClass () {\n    parent.apply(this, arguments)\n\n    if (this.constructor === SubClass && this.initialize) {\n      this.initialize.apply(this, arguments)\n    }\n  }\n\n  if (parent !== Class) {\n    mix(SubClass, parent, parent.StaticsWhiteList)\n  }\n\n  implement.call(SubClass, properties)\n\n  return classify(SubClass)\n}\n\n\nfunction implement (properties) {\n  var key, value\n\n  for (key in properties) {\n    value = properties[key]\n\n    if (Class.Mutators.hasOwnProperty(key)) {\n      Class.Mutators[key].call(this, value)\n    } else {\n      this.prototype[key] = value\n    }\n  }\n}\n\n// Create a sub Class based on `Class`.\nClass.extend = function (properties) {\n  properties || (properties = {})\n  properties.Extends = this\n\n  return Class.create(properties)\n}\n\nfunction classify (cls) {\n  cls.extend = Class.extend\n  cls.implement = implement\n  return cls\n}\n\n// Mutators define special properties.\nClass.Mutators = {\n\n  'Extends': function (parent) {\n    var existed = this.prototype\n    var proto = createProto(parent.prototype)\n\n    mix(proto, existed)\n\n    proto.constructor = this\n\n    this.prototype = proto\n\n    this.superclass = parent.prototype\n  },\n\n  'Implements': function (items) {\n    isArray(items) || (items = [items])\n    var proto = this.prototype, item\n\n    while (item = items.shift()) {\n      mix(proto, item.prototype || item)\n    }\n  },\n\n  'Statics': function (staticProperties) {\n    mix(this, staticProperties)\n  }\n}\n\nfunction Ctor () {\n}\n\nvar createProto = Object.__proto__ ?\n    function (proto) {\n      return { __proto__: proto }\n    } :\n    function (proto) {\n      Ctor.prototype = proto\n      return new Ctor()\n    }\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Class);\n\n// Helpers\n// ------------\nfunction mix (r, s, wl) {\n  // Copy \"all\" properties including inherited ones.\n  for (var p in s) {\n    if (s.hasOwnProperty(p)) {\n      if (wl && indexOf(wl, p) === -1) continue\n\n      // 在 iPhone 1 代等设备的 Safari 中，prototype 也会被枚举出来，需排除\n      if (p !== 'prototype') {\n        r[p] = s[p]\n      }\n    }\n  }\n}\n\nvar toString = Object.prototype.toString\n\nvar isArray = Array.isArray || function (val) {\n    return toString.call(val) === '[object Array]'\n}\n\nvar isFunction = function (val) {\n  return toString.call(val) === '[object Function]'\n}\n\nvar indexOf = Array.prototype.indexOf ?\n    function (arr, item) {\n      return arr.indexOf(item)\n    } :\n    function (arr, item) {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        if (arr[i] === item) {\n          return i\n        }\n      }\n      return -1\n    }\n\n\n//# sourceURL=webpack://Umc/./src/components/core/class.js?");

/***/ }),

/***/ "./src/components/core/daparser.js":
/*!*****************************************!*\
  !*** ./src/components/core/daparser.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n// data api 解析器，提供对单个 element 的解析，可用来初始化页面中的所有 Widget 组件。\n\n\nvar DAParser = {};\n\n// 得到某个 DOM 元素的 dataset\nDAParser.parseElement = function(element, raw) {\n  element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element)[0]\n  var dataset = {}\n\n  // ref: https://developer.mozilla.org/en/DOM/element.dataset\n  if (element.dataset) {\n    // 转换成普通对象\n    dataset = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, element.dataset)\n  }\n  else {\n    var attrs = element.attributes\n\n    for (var i = 0, len = attrs.length; i < len; i++) {\n      var attr = attrs[i]\n      var name = attr.name\n\n      if (name.indexOf('data-') === 0) {\n        name = camelCase(name.substring(5))\n        dataset[name] = attr.value\n      }\n    }\n  }\n\n  return raw === true ? dataset : normalizeValues(dataset)\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DAParser);\n\n// Helpers\n// ------\nvar RE_DASH_WORD = /-([a-z])/g\nvar JSON_LITERAL_PATTERN = /^\\s*[\\[{].*[\\]}]\\s*$/\nvar parseJSON = window.JSON ? JSON.parse : jquery__WEBPACK_IMPORTED_MODULE_0___default.a.parseJSON\n\n// 仅处理字母开头的，其他情况转换为小写：\"data-x-y-123-_A\" --> xY-123-_a\nfunction camelCase(str) {\n  return str.toLowerCase().replace(RE_DASH_WORD, function(all, letter) {\n    return (letter + '').toUpperCase()\n  })\n}\n\n// 解析并归一化配置中的值\nfunction normalizeValues(data) {\n  for (var key in data) {\n    if (data.hasOwnProperty(key)) {\n\n      var val = data[key]\n      if (typeof val !== 'string') continue\n\n      if (JSON_LITERAL_PATTERN.test(val)) {\n        val = val.replace(/'/g, '\"')\n        data[key] = normalizeValues(parseJSON(val))\n      }\n      else {\n        data[key] = normalizeValue(val)\n      }\n    }\n  }\n\n  return data\n}\n\n// 将 'false' 转换为 false\n// 'true' 转换为 true\n// '3253.34' 转换为 3253.34\nfunction normalizeValue(val) {\n  if (val.toLowerCase() === 'false') {\n    val = false\n  }\n  else if (val.toLowerCase() === 'true') {\n    val = true\n  }\n  else if (/\\d/.test(val) && /[^a-z]/i.test(val)) {\n    var number = parseFloat(val)\n    if (number + '' === val) {\n      val = number\n    }\n  }\n\n  return val\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/core/daparser.js?");

/***/ }),

/***/ "./src/components/core/events.js":
/*!***************************************!*\
  !*** ./src/components/core/events.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Regular expression used to split event strings\nvar eventSplitter = /\\s+/\n\n//     var object = new Events();\n//     object.on('expand', function(){ alert('expanded'); });\n//     object.trigger('expand');\n//\nfunction Events() {\n}\n\n// Bind one or more space separated events, `events`, to a `callback`\n// function. Passing `\"all\"` will bind the callback to all events fired.\nEvents.prototype.on = function(events, callback, context) {\n  var cache, event, list\n  if (!callback) return this\n\n  cache = this.__events || (this.__events = {})\n  events = events.split(eventSplitter)\n\n  while (event = events.shift()) {\n    list = cache[event] || (cache[event] = [])\n    list.push(callback, context)\n  }\n\n  return this\n}\n\nEvents.prototype.once = function(events, callback, context) {\n  var that = this\n  var cb = function() {\n    that.off(events, cb)\n    callback.apply(context || that, arguments)\n  }\n  return this.on(events, cb, context)\n}\n\n// Remove one or many callbacks. If `context` is null, removes all callbacks\n// with that function. If `callback` is null, removes all callbacks for the\n// event. If `events` is null, removes all bound callbacks for all events.\nEvents.prototype.off = function(events, callback, context) {\n  var cache, event, list, i\n\n  // No events, or removing *all* events.\n  if (!(cache = this.__events)) return this\n  if (!(events || callback || context)) {\n    delete this.__events\n    return this\n  }\n\n  events = events ? events.split(eventSplitter) : keys(cache)\n\n  // Loop through the callback list, splicing where appropriate.\n  while (event = events.shift()) {\n    list = cache[event]\n    if (!list) continue\n\n    if (!(callback || context)) {\n      delete cache[event]\n      continue\n    }\n\n    for (i = list.length - 2; i >= 0; i -= 2) {\n      if (!(callback && list[i] !== callback ||\n          context && list[i + 1] !== context)) {\n        list.splice(i, 2)\n      }\n    }\n  }\n\n  return this\n}\n\n// Trigger one or many events, firing all bound callbacks. Callbacks are\n// passed the same arguments as `trigger` is, apart from the event name\n// (unless you're listening on `\"all\"`, which will cause your callback to\n// receive the true name of the event as the first argument).\nEvents.prototype.trigger = function(events) {\n  var cache, event, all, list, i, len, rest = [], args, returned = true;\n  if (!(cache = this.__events)) return this\n\n  events = events.split(eventSplitter)\n\n  // Fill up `rest` with the callback arguments.  Since we're only copying\n  // the tail of `arguments`, a loop is much faster than Array#slice.\n  for (i = 1, len = arguments.length; i < len; i++) {\n    rest[i - 1] = arguments[i]\n  }\n\n  // For each event, walk through the list of callbacks twice, first to\n  // trigger the event, then to trigger any `\"all\"` callbacks.\n  while (event = events.shift()) {\n    // Copy callback lists to prevent modification.\n    if (all = cache.all) all = all.slice()\n    if (list = cache[event]) list = list.slice()\n\n    // Execute event callbacks except one named \"all\"\n    if (event !== 'all') {\n      returned = triggerEvents(list, rest, this) && returned\n    }\n\n    // Execute \"all\" callbacks.\n    returned = triggerEvents(all, [event].concat(rest), this) && returned\n  }\n\n  return returned\n}\n\nEvents.prototype.emit = Events.prototype.trigger\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Events);\n\n// Helpers\n// -------\nvar keys = Object.keys\n\nif (!keys) {\n  keys = function(o) {\n    var result = []\n\n    for (var name in o) {\n      if (o.hasOwnProperty(name)) {\n        result.push(name)\n      }\n    }\n    return result\n  }\n}\n\n// Mix `Events` to object instance or Class function.\nEvents.mixTo = function(receiver) {\n  receiver = isFunction(receiver) ? receiver.prototype : receiver\n  var proto = Events.prototype\n\n  var event = new Events\n  for (var key in proto) {\n    if (proto.hasOwnProperty(key)) {\n      copyProto(key)\n    }\n  }\n\n  function copyProto(key) {\n    receiver[key] = function() {\n      proto[key].apply(event, Array.prototype.slice.call(arguments))\n      return this\n    }\n  }\n}\n\n// Execute callbacks\nfunction triggerEvents(list, args, context) {\n  var pass = true\n\n  if (list) {\n    var i = 0, l = list.length, a1 = args[0], a2 = args[1], a3 = args[2]\n    switch (args.length) {\n      case 0: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context) !== false && pass} break;\n      case 1: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context, a1) !== false && pass} break;\n      case 2: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context, a1, a2) !== false && pass} break;\n      case 3: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context, a1, a2, a3) !== false && pass} break;\n      default: for (; i < l; i += 2) {pass = list[i].apply(list[i + 1] || context, args) !== false && pass} break;\n    }\n  }\n  return pass;\n}\n\nfunction isFunction(func) {\n  return Object.prototype.toString.call(func) === '[object Function]'\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/core/events.js?");

/***/ }),

/***/ "./src/components/core/widget.js":
/*!***************************************!*\
  !*** ./src/components/core/widget.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"./src/components/core/base.js\");\n/* harmony import */ var _daparser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./daparser */ \"./src/components/core/daparser.js\");\n/* harmony import */ var _auto_render__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auto-render */ \"./src/components/core/auto-render.js\");\n// Widget 是与 DOM 元素相关联的非工具类组件，主要负责 View 层的管理。\n// Widget 组件具有四个要素：描述状态的 attributes 和 properties，描述行为的 events\n// 和 methods。Widget 基类约定了这四要素创建时的基本流程和最佳实践。\n\n\n\n\nvar DELEGATE_EVENT_NS = '.delegate-events-'\nvar ON_RENDER = '_onRender'\nvar DATA_WIDGET_CID = 'data-widget-cid'\n\n// 所有初始化过的 Widget 实例\nvar cachedInstances = {}\n\nvar Widget = _base__WEBPACK_IMPORTED_MODULE_0__[\"default\"].extend({\n\n  // config 中的这些键值会直接添加到实例上，转换成 properties\n  propsInAttrs: ['initElement', 'element', 'events'],\n\n  // 与 widget 关联的 DOM 元素\n  element: null,\n\n  // 事件代理，格式为：\n  //   {\n  //     'mousedown .title': 'edit',\n  //     'click {{attrs.saveButton}}': 'save'\n  //     'click .open': function(ev) { ... }\n  //   }\n  events: null,\n\n  // 属性列表\n  attrs: {\n    // 基本属性\n    id: null,\n    className: null,\n    style: null,\n\n    // 默认模板\n    template: '<div></div>',\n\n    // 默认数据模型\n    model: null,\n\n    // 组件的默认父节点\n    parentNode: document.body\n  },\n\n  // 初始化方法，确定组件创建时的基本流程：\n  // 初始化 attrs --》 初始化 props --》 初始化 events --》 子类的初始化\n  initialize: function(config) {\n    this.cid = uniqueCid()\n\n    // 初始化 attrs\n    var dataAttrsConfig = this._parseDataAttrsConfig(config)\n    Widget.superclass.initialize.call(this, config ? $.extend(dataAttrsConfig, config) : dataAttrsConfig)\n\n    // 初始化 props\n    this.parseElement()\n    this.initProps()\n\n    // 初始化 events\n    this.delegateEvents()\n\n    // 子类自定义的初始化\n    this.setup()\n\n    // 保存实例信息\n    this._stamp()\n\n    // 是否由 template 初始化\n    this._isTemplate = !(config && config.element)\n  },\n\n  // 解析通过 data-attr 设置的 api\n  _parseDataAttrsConfig: function(config) {\n    var element, dataAttrsConfig\n    if (config) {\n      element = config.initElement ? $(config.initElement) : $(config.element)\n    }\n\n    // 解析 data-api 时，只考虑用户传入的 element，不考虑来自继承或从模板构建的\n    if (element && element[0] && !_auto_render__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isDataApiOff(element)) {\n      dataAttrsConfig = _daparser__WEBPACK_IMPORTED_MODULE_1__[\"default\"].parseElement(element)\n    }\n\n    return dataAttrsConfig\n  },\n\n  // 构建 this.element\n  parseElement: function() {\n    var element = this.element\n\n    if (element) {\n      this.element = $(element)\n    }\n    // 未传入 element 时，从 template 构建\n    else if (this.get('template')) {\n      this.parseElementFromTemplate()\n    }\n\n    // 如果对应的 DOM 元素不存在，则报错\n    if (!this.element || !this.element[0]) {\n      throw new Error('element is invalid')\n    }\n  },\n\n  // 从模板中构建 this.element\n  parseElementFromTemplate: function() {\n    this.element = $(this.get('template'))\n  },\n\n  // 负责 properties 的初始化，提供给子类覆盖\n  initProps: function() {\n  },\n\n  // 注册事件代理\n  delegateEvents: function(element, events, handler) {\n    var argus = trimRightUndefine(Array.prototype.slice.call(arguments));\n    // widget.delegateEvents()\n    if (argus.length === 0) {\n      events = getEvents(this)\n      element = this.element\n    }\n\n    // widget.delegateEvents({\n    //   'click p': 'fn1',\n    //   'click li': 'fn2'\n    // })\n    else if (argus.length === 1) {\n      events = element\n      element = this.element\n    }\n\n    // widget.delegateEvents('click p', function(ev) { ... })\n    else if (argus.length === 2) {\n      handler = events\n      events = element\n      element = this.element\n    }\n\n    // widget.delegateEvents(element, 'click p', function(ev) { ... })\n    else {\n      element || (element = this.element)\n      this._delegateElements || (this._delegateElements = [])\n      this._delegateElements.push($(element))\n    }\n\n    // 'click p' => {'click p': handler}\n    if (isString(events) && isFunction(handler)) {\n      var o = {}\n      o[events] = handler\n      events = o\n    }\n\n    // key 为 'event selector'\n    for (var key in events) {\n      if (!events.hasOwnProperty(key)) continue\n\n      var args = parseEventKey(key, this)\n      var eventType = args.type\n      var selector = args.selector\n\n      ;(function(handler, widget) {\n\n        var callback = function(ev) {\n          if (isFunction(handler)) {\n            handler.call(widget, ev)\n          } else {\n            widget[handler](ev)\n          }\n        }\n\n        // delegate\n        if (selector) {\n          $(element).on(eventType, selector, callback)\n        }\n        // normal bind\n        // 分开写是为了兼容 zepto，zepto 的判断不如 jquery 强劲有力\n        else {\n          $(element).on(eventType, callback)\n        }\n\n      })(events[key], this)\n    }\n\n    return this\n  },\n\n  // 卸载事件代理\n  undelegateEvents: function(element, eventKey) {\n    var argus = trimRightUndefine(Array.prototype.slice.call(arguments));\n\n    if (!eventKey) {\n      eventKey = element\n      element = null\n    }\n\n    // 卸载所有\n    // .undelegateEvents()\n    if (argus.length === 0) {\n      var type = DELEGATE_EVENT_NS + this.cid\n\n      this.element && this.element.off(type)\n\n      // 卸载所有外部传入的 element\n      if (this._delegateElements) {\n        for (var de in this._delegateElements) {\n          if (!this._delegateElements.hasOwnProperty(de)) continue\n          this._delegateElements[de].off(type)\n        }\n      }\n\n    } else {\n      var args = parseEventKey(eventKey, this)\n\n      // 卸载 this.element\n      // .undelegateEvents(events)\n      if (!element) {\n        this.element && this.element.off(args.type, args.selector)\n      }\n\n      // 卸载外部 element\n      // .undelegateEvents(element, events)\n      else {\n        $(element).off(args.type, args.selector)\n      }\n    }\n    return this\n  },\n\n  // 提供给子类覆盖的初始化方法\n  setup: function() {\n  },\n\n  // 将 widget 渲染到页面上\n  // 渲染不仅仅包括插入到 DOM 树中，还包括样式渲染等\n  // 约定：子类覆盖时，需保持 `return this`\n  render: function() {\n\n    // 让渲染相关属性的初始值生效，并绑定到 change 事件\n    if (!this.rendered) {\n      this._renderAndBindAttrs()\n      this.rendered = true\n    }\n\n    // 插入到文档流中\n    var parentNode = this.get('parentNode')\n    if (parentNode && !isInDocument(this.element[0])) {\n      // 隔离样式，添加统一的命名空间\n      // https://github.com/aliceui/aliceui.org/issues/9\n      var outerBoxClass = this.constructor.outerBoxClass\n      if (outerBoxClass) {\n        var outerBox = this._outerBox = $('<div></div>').addClass(outerBoxClass)\n        outerBox.append(this.element).appendTo(parentNode)\n      } else {\n        this.element.appendTo(parentNode)\n      }\n    }\n\n    return this\n  },\n\n  // 让属性的初始值生效，并绑定到 change:attr 事件上\n  _renderAndBindAttrs: function() {\n    var widget = this\n    var attrs = widget.attrs\n\n    for (var attr in attrs) {\n      if (!attrs.hasOwnProperty(attr)) continue\n      var m = ON_RENDER + ucfirst(attr)\n\n      if (this[m]) {\n        var val = this.get(attr)\n\n        // 让属性的初始值生效。注：默认空值不触发\n        if (!isEmptyAttrValue(val)) {\n          this[m](val, undefined, attr)\n        }\n\n        // 将 _onRenderXx 自动绑定到 change:xx 事件上\n        (function(m) {\n          widget.on('change:' + attr, function(val, prev, key) {\n            widget[m](val, prev, key)\n          })\n        })(m)\n      }\n    }\n  },\n\n  _onRenderId: function(val) {\n    this.element.attr('id', val)\n  },\n\n  _onRenderClassName: function(val) {\n    this.element.addClass(val)\n  },\n\n  _onRenderStyle: function(val) {\n    this.element.css(val)\n  },\n\n  // 让 element 与 Widget 实例建立关联\n  _stamp: function() {\n    var cid = this.cid;\n\n    (this.initElement || this.element).attr(DATA_WIDGET_CID, cid)\n    cachedInstances[cid] = this\n  },\n\n  // 在 this.element 内寻找匹配节点\n  $: function(selector) {\n    return this.element.find(selector)\n  },\n\n  destroy: function() {\n    this.undelegateEvents()\n    delete cachedInstances[this.cid]\n\n    // For memory leak\n    if (this.element && this._isTemplate) {\n      this.element.off()\n      // 如果是 widget 生成的 element 则去除\n      if (this._outerBox) {\n        this._outerBox.remove()\n      } else {\n        this.element.remove()\n      }\n    }\n    this.element = null\n\n    Widget.superclass.destroy.call(this)\n  }\n})\n\n// For memory leak\n$(window).unload(function() {\n  for(var cid in cachedInstances) {\n    cachedInstances[cid].destroy()\n  }\n})\n\n// 查询与 selector 匹配的第一个 DOM 节点，得到与该 DOM 节点相关联的 Widget 实例\nWidget.query = function(selector) {\n  var element = $(selector).eq(0)\n  var cid\n\n  element && (cid = element.attr(DATA_WIDGET_CID))\n  return cachedInstances[cid]\n}\n\nWidget.autoRender = _auto_render__WEBPACK_IMPORTED_MODULE_2__[\"default\"].autoRender\nWidget.autoRenderAll = _auto_render__WEBPACK_IMPORTED_MODULE_2__[\"default\"].autoRenderAll\nWidget.StaticsWhiteList = ['autoRender']\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Widget);\n\n// Helpers\n// ------\nvar toString = Object.prototype.toString\nvar cidCounter = 0\n\nfunction uniqueCid() {\n  return 'widget-' + cidCounter++\n}\n\nfunction isString(val) {\n  return toString.call(val) === '[object String]'\n}\n\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]'\n}\n\n// Zepto 上没有 contains 方法\nvar contains = $.contains || function(a, b) {\n  //noinspection JSBitwiseOperatorUsage\n  return !!(a.compareDocumentPosition(b) & 16)\n}\n\nfunction isInDocument(element) {\n  return contains(document.documentElement, element)\n}\n\nfunction ucfirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1)\n}\n\nvar EVENT_KEY_SPLITTER = /^(\\S+)\\s*(.*)$/\nvar EXPRESSION_FLAG = /{{([^}]+)}}/g\nvar INVALID_SELECTOR = 'INVALID_SELECTOR'\n\nfunction getEvents(widget) {\n  if (isFunction(widget.events)) {\n    widget.events = widget.events()\n  }\n  return widget.events\n}\n\nfunction parseEventKey(eventKey, widget) {\n  var match = eventKey.match(EVENT_KEY_SPLITTER)\n  var eventType = match[1] + DELEGATE_EVENT_NS + widget.cid\n\n  // 当没有 selector 时，需要设置为 undefined，以使得 zepto 能正确转换为 bind\n  var selector = match[2] || undefined\n\n  if (selector && selector.indexOf('{{') > -1) {\n    selector = parseExpressionInEventKey(selector, widget)\n  }\n\n  return {\n    type: eventType,\n    selector: selector\n  }\n}\n\n// 解析 eventKey 中的 {{xx}}, {{yy}}\nfunction parseExpressionInEventKey(selector, widget) {\n\n  return selector.replace(EXPRESSION_FLAG, function(m, name) {\n    var parts = name.split('.')\n    var point = widget, part\n\n    while (part = parts.shift()) {\n      if (point === widget.attrs) {\n        point = widget.get(part)\n      } else {\n        point = point[part]\n      }\n    }\n\n    // 已经是 className，比如来自 dataset 的\n    if (isString(point)) {\n      return point\n    }\n\n    // 不能识别的，返回无效标识\n    return INVALID_SELECTOR\n  })\n}\n\n// 对于 attrs 的 value 来说，以下值都认为是空值： null, undefined\nfunction isEmptyAttrValue(o) {\n  return o == null || o === undefined\n}\n\nfunction trimRightUndefine(argus) {\n  for (var i = argus.length - 1; i >= 0; i--) {\n    if (argus[i] === undefined) {\n      argus.pop();\n    } else {\n      break;\n    }\n  }\n  return argus;\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/core/widget.js?");

/***/ }),

/***/ "./src/components/overlay/index.js":
/*!*****************************************!*\
  !*** ./src/components/overlay/index.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utility_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utility/position */ \"./src/components/utility/position.js\");\n/* harmony import */ var _utility_iframe_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utility/iframe-shim */ \"./src/components/utility/iframe-shim.js\");\n/* harmony import */ var _core_widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/widget */ \"./src/components/core/widget.js\");\n\n/**\n * Overlay 继承了 Widget 的生命周期\n * 实现了 可定位（Positionable）和 可层叠（Stackable）\n */\n\n\n\n\n\n// Overlay\n// -------\n// Overlay 组件的核心特点是可定位（Positionable）和可层叠（Stackable）\n// 是一切悬浮类 UI 组件的基类\nvar Overlay = _core_widget__WEBPACK_IMPORTED_MODULE_3__[\"default\"].extend({\n\n  attrs: {\n    // 基本属性\n    width: null,\n    height: null,\n    zIndex: 99,\n    visible: false,\n\n    // 定位配置\n    align: {\n      // element 的定位点，默认为左上角\n      selfXY: [0, 0],\n      // 基准定位元素，默认为当前可视区域\n      baseElement: _utility_position__WEBPACK_IMPORTED_MODULE_1__[\"default\"].VIEWPORT,\n      // 基准定位元素的定位点，默认为左上角\n      baseXY: [0, 0]\n    },\n\n    // 父元素\n    parentNode: document.body\n  },\n\n  show: function () {\n    // 若从未渲染，则调用 render\n    if (!this.rendered) {\n      this.render();\n    }\n    this.set('visible', true);\n    return this;\n  },\n\n  hide: function () {\n    this.set('visible', false);\n    return this;\n  },\n\n  setup: function () {\n    var that = this;\n    // 加载 iframe 遮罩层并与 overlay 保持同步\n    this._setupShim();\n    // 窗口resize时，重新定位浮层\n    this._setupResize();\n\n    this.after('render', function () {\n      var _pos = this.element.css('position');\n      if (_pos === 'static' || _pos === 'relative') {\n        this.element.css({\n          position: 'absolute',\n          left: '-9999px',\n          top: '-9999px'\n        });\n      }\n    });\n    // 统一在显示之后重新设定位置\n    this.after('show', function () {\n      that._setPosition();\n    });\n  },\n\n  destroy: function () {\n    // 销毁两个静态数组中的实例\n    erase(this, Overlay.allOverlays);\n    erase(this, Overlay.blurOverlays);\n    return Overlay.superclass.destroy.call(this);\n  },\n\n  // 进行定位\n  _setPosition: function (align) {\n    // 不在文档流中，定位无效\n    if (!isInDocument(this.element[0])) return;\n\n    align || (align = this.get('align'));\n\n    // 如果align为空，表示不需要使用js对齐\n    if (!align) return;\n\n    var isHidden = this.element.css('display') === 'none';\n\n    // 在定位时，为避免元素高度不定，先显示出来\n    if (isHidden) {\n      this.element.css({\n        visibility: 'hidden',\n        display: 'block'\n      });\n    }\n\n    _utility_position__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pin({\n      element: this.element,\n      x: align.selfXY[0],\n      y: align.selfXY[1]\n    }, {\n      element: align.baseElement,\n      x: align.baseXY[0],\n      y: align.baseXY[1]\n    });\n\n    // 定位完成后，还原\n    if (isHidden) {\n      this.element.css({\n        visibility: '',\n        display: 'none'\n      });\n    }\n\n    return this;\n  },\n\n  // 加载 iframe 遮罩层并与 overlay 保持同步\n  _setupShim: function () {\n    var shim = new _utility_iframe_shim__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.element);\n\n    // 在隐藏和设置位置后，要重新定位\n    // 显示后会设置位置，所以不用绑定 shim.sync\n    this.after('hide _setPosition', shim.sync, shim);\n\n    // 除了 parentNode 之外的其他属性发生变化时，都触发 shim 同步\n    var attrs = ['width', 'height'];\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        this.on('change:' + attr, shim.sync, shim);\n      }\n    }\n\n    // 在销魂自身前要销毁 shim\n    this.before('destroy', shim.destroy, shim);\n  },\n\n  // resize窗口时重新定位浮层，用这个方法收集所有浮层实例\n  _setupResize: function () {\n    Overlay.allOverlays.push(this);\n  },\n\n  // 除了 element 和 relativeElements，点击 body 后都会隐藏 element\n  _blurHide: function (arr) {\n    arr = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.makeArray(arr);\n    arr.push(this.element);\n    this._relativeElements = arr;\n    Overlay.blurOverlays.push(this);\n  },\n\n  // 用于 set 属性后的界面更新\n  _onRenderWidth: function (val) {\n    this.element.css('width', val);\n  },\n\n  _onRenderHeight: function (val) {\n    this.element.css('height', val);\n  },\n\n  _onRenderZIndex: function (val) {\n    this.element.css('zIndex', val);\n  },\n\n  _onRenderAlign: function (val) {\n    this._setPosition(val);\n  },\n\n  _onRenderVisible: function (val) {\n    this.element[val ? 'show' : 'hide']();\n  }\n\n});\n\n// 绑定 blur 隐藏事件\nOverlay.blurOverlays = [];\njquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on('click', function (e) {\n  hideBlurOverlays(e);\n});\n\n// 绑定 resize 重新定位事件\nvar timeout;\nvar winWidth = jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).width();\nvar winHeight = jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).height();\nOverlay.allOverlays = [];\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(window).resize(function () {\n  timeout && clearTimeout(timeout);\n  timeout = setTimeout(function () {\n    var winNewWidth = jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).width();\n    var winNewHeight = jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).height();\n\n    // IE678 莫名其妙触发 resize\n    // http://stackoverflow.com/questions/1852751/window-resize-event-firing-in-internet-explorer\n    if (winWidth !== winNewWidth || winHeight !== winNewHeight) {\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()(Overlay.allOverlays).each(function (i, item) {\n        // 当实例为空或隐藏时，不处理\n        if (!item || !item.get('visible')) {\n          return;\n        }\n        item._setPosition();\n      });\n    }\n\n    winWidth = winNewWidth;\n    winHeight = winNewHeight;\n  }, 80);\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Overlay);\n\n// Helpers\n// -------\nfunction isInDocument(element) {\n  return jquery__WEBPACK_IMPORTED_MODULE_0___default.a.contains(document.documentElement, element);\n}\n\nfunction hideBlurOverlays(e) {\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(Overlay.blurOverlays).each(function (index, item) {\n    // 当实例为空或隐藏时，不处理\n    if (!item || !item.get('visible')) {\n      return;\n    }\n\n    // 遍历 _relativeElements ，当点击的元素落在这些元素上时，不处理\n    for (var i = 0; i < item._relativeElements.length; i++) {\n      var el = jquery__WEBPACK_IMPORTED_MODULE_0___default()(item._relativeElements[i])[0];\n      if (el === e.target || jquery__WEBPACK_IMPORTED_MODULE_0___default.a.contains(el, e.target)) {\n        return;\n      }\n    }\n\n    // 到这里，判断触发了元素的 blur 事件，隐藏元素\n    item.hide();\n  });\n}\n\n// 从数组中删除对应元素\nfunction erase(target, array) {\n  for (var i = 0; i < array.length; i++) {\n    if (target === array[i]) {\n      array.splice(i, 1);\n      return array;\n    }\n  }\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/overlay/index.js?");

/***/ }),

/***/ "./src/components/overlay/mask.js":
/*!****************************************!*\
  !*** ./src/components/overlay/mask.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./src/components/overlay/index.js\");\n\n/**\n * Mask 是 Overlay 的一个具体实现，提供一个单例的全屏遮罩组件\n */\n\n\nvar ua = (window.navigator.userAgent || \"\").toLowerCase()\nvar isIE6 = ua.indexOf(\"msie 6\") !== -1\n\nvar body = $(document.body)\nvar doc = $(document)\n\n// Mask\n// ----------\n// 全屏遮罩层组件\nvar Mask = _index__WEBPACK_IMPORTED_MODULE_0__[\"default\"].extend({\n\n  attrs: {\n    width: isIE6 ? doc.outerWidth(true) : '100%',\n    height: isIE6 ? doc.outerHeight(true) : '100%',\n\n    className: 'ui-mask',\n    opacity: 0.2,\n    backgroundColor: '#000',\n    style: {\n      position: isIE6 ? 'absolute' : 'fixed',\n      top: 0,\n      left: 0\n    },\n\n    align: {\n      // undefined 表示相对于当前可视范围定位\n      baseElement: isIE6 ? body : undefined\n    }\n  },\n\n  show: function () {\n    if (isIE6) {\n      this.set('width', doc.outerWidth(true));\n      this.set('height', doc.outerHeight(true));\n    }\n    return Mask.superclass.show.call(this);\n  },\n\n  _onRenderBackgroundColor: function (val) {\n    this.element.css('backgroundColor', val);\n  },\n\n  _onRenderOpacity: function (val) {\n    this.element.css('opacity', val);\n  }\n});\n\n// 单例\n_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Mask = new Mask();\n\n\n//# sourceURL=webpack://Umc/./src/components/overlay/mask.js?");

/***/ }),

/***/ "./src/components/utility/iframe-shim.js":
/*!***********************************************!*\
  !*** ./src/components/utility/iframe-shim.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./position */ \"./src/components/utility/position.js\");\n\n\n\n\nvar isIE6 = (window.navigator.userAgent || '').toLowerCase().indexOf('msie 6') !== -1;\n\n// target 是需要添加垫片的目标元素，可以传 `DOM Element` 或 `Selector`\nfunction Shim(target) {\n    // 如果选择器选了多个 DOM，则只取第一个\n    this.target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(target).eq(0);\n}\n\n// 根据目标元素计算 iframe 的显隐、宽高、定位\nShim.prototype.sync = function() {\n    var target = this.target;\n    var iframe = this.iframe;\n\n    // 如果未传 target 则不处理\n    if (!target.length) return this;\n\n    var height = target.outerHeight();\n    var width = target.outerWidth();\n\n    // 如果目标元素隐藏，则 iframe 也隐藏\n    // jquery 判断宽高同时为 0 才算隐藏，这里判断宽高其中一个为 0 就隐藏\n    // http://api.jquery.com/hidden-selector/\n    if (!height || !width || target.is(':hidden')) {\n        iframe && iframe.hide();\n    } else {\n        // 第一次显示时才创建：as lazy as possible\n        iframe || (iframe = this.iframe = createIframe(target));\n\n        iframe.css({\n            'height': height,\n            'width': width\n        });\n\n        _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pin(iframe[0], target[0]);\n        iframe.show();\n    }\n\n    return this;\n};\n\n// 销毁 iframe 等\nShim.prototype.destroy = function() {\n    if (this.iframe) {\n        this.iframe.remove();\n        delete this.iframe;\n    }\n    delete this.target;\n};\n\nif (!isIE6) {\n  // 除了 IE6 都返回空函数\n  function Noop() {}\n\n  Noop.prototype.sync = function() {return this};\n  Noop.prototype.destroy = Noop;\n\n  Shim = Noop;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Shim);\n\n// Helpers\n// 在 target 之前创建 iframe，这样就没有 z-index 问题\n// iframe 永远在 target 下方\nfunction createIframe(target) {\n    var css = {\n        display: 'none',\n        border: 'none',\n        opacity: 0,\n        position: 'absolute'\n    };\n\n    // 如果 target 存在 zIndex 则设置\n    var zIndex = target.css('zIndex');\n    if (zIndex && zIndex > 0) {\n        css.zIndex = zIndex - 1;\n    }\n\n    return jquery__WEBPACK_IMPORTED_MODULE_0___default()('<iframe>', {\n        src: 'javascript:\\'\\'', // 不加的话，https 下会弹警告\n        frameborder: 0,\n        css: css\n    }).insertBefore(target);\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/utility/iframe-shim.js?");

/***/ }),

/***/ "./src/components/utility/position.js":
/*!********************************************!*\
  !*** ./src/components/utility/position.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n// 定位工具组件，将一个 DOM 节点相对对另一个 DOM 节点进行定位操作。\n\n\nvar Position = {}\n\nvar VIEWPORT = { _id: 'VIEWPORT', nodeType: 1 }\nvar isPinFixed = false\nvar ua = (window.navigator.userAgent || \"\").toLowerCase()\nvar isIE6 = ua.indexOf(\"msie 6\") !== -1\n\n// 将目标元素相对于基准元素进行定位\n// 这是 Position 的基础方法，接收两个参数，分别描述了目标元素和基准元素的定位点\nPosition.pin = function(pinObject, baseObject) {\n\n    // 将两个参数转换成标准定位对象 { element: a, x: 0, y: 0 }\n    pinObject = normalize(pinObject);\n    baseObject = normalize(baseObject);\n\n    // if pinObject.element is not present\n    // https://github.com/aralejs/position/pull/11\n    if (pinObject.element === VIEWPORT ||\n        pinObject.element._id === 'VIEWPORT') {\n        return;\n    }\n\n    // 设定目标元素的 position 为绝对定位\n    // 若元素的初始 position 不为 absolute，会影响元素的 display、宽高等属性\n    var pinElement = jquery__WEBPACK_IMPORTED_MODULE_0___default()(pinObject.element);\n\n    if (pinElement.css('position') !== 'fixed' || isIE6) {\n        pinElement.css('position', 'absolute');\n        isPinFixed = false;\n    }\n    else {\n        // 定位 fixed 元素的标志位，下面有特殊处理\n        isPinFixed = true;\n    }\n\n    // 将位置属性归一化为数值\n    // 注：必须放在上面这句 `css('position', 'absolute')` 之后，\n    //    否则获取的宽高有可能不对\n    posConverter(pinObject);\n    posConverter(baseObject);\n\n    var parentOffset = getParentOffset(pinElement);\n    var baseOffset = baseObject.offset();\n\n    // 计算目标元素的位置\n    var top = baseOffset.top + baseObject.y -\n            pinObject.y - parentOffset.top;\n\n    var left = baseOffset.left + baseObject.x -\n            pinObject.x - parentOffset.left;\n\n    // 定位目标元素\n    pinElement.css({ left: left, top: top });\n};\n\n\n// 将目标元素相对于基准元素进行居中定位\n// 接受两个参数，分别为目标元素和定位的基准元素，都是 DOM 节点类型\nPosition.center = function(pinElement, baseElement) {\n    Position.pin({\n        element: pinElement,\n        x: '50%',\n        y: '50%'\n    }, {\n        element: baseElement,\n        x: '50%',\n        y: '50%'\n    });\n};\n\n\n// 这是当前可视区域的伪 DOM 节点\n// 需要相对于当前可视区域定位时，可传入此对象作为 element 参数\nPosition.VIEWPORT = VIEWPORT;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Position);\n\n// Helpers\n// -------\n// 将参数包装成标准的定位对象，形似 { element: a, x: 0, y: 0 }\nfunction normalize(posObject) {\n    posObject = toElement(posObject) || {};\n\n    if (posObject.nodeType) {\n        posObject = { element: posObject };\n    }\n\n    var element = toElement(posObject.element) || VIEWPORT;\n    if (element.nodeType !== 1) {\n        throw new Error('posObject.element is invalid.');\n    }\n\n    var result = {\n        element: element,\n        x: posObject.x || 0,\n        y: posObject.y || 0\n    };\n\n    // config 的深度克隆会替换掉 Position.VIEWPORT, 导致直接比较为 false\n    var isVIEWPORT = (element === VIEWPORT || element._id === 'VIEWPORT');\n\n    // 归一化 offset\n    result.offset = function() {\n        // 若定位 fixed 元素，则父元素的 offset 没有意义\n        if (isPinFixed) {\n            return {\n                left: 0,\n                top: 0\n            };\n        }\n        else if (isVIEWPORT) {\n            return {\n                left: jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).scrollLeft(),\n                top: jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).scrollTop()\n            };\n        }\n        else {\n            return getOffset(jquery__WEBPACK_IMPORTED_MODULE_0___default()(element)[0]);\n        }\n    };\n\n    // 归一化 size, 含 padding 和 border\n    result.size = function() {\n        var el = isVIEWPORT ? jquery__WEBPACK_IMPORTED_MODULE_0___default()(window) : jquery__WEBPACK_IMPORTED_MODULE_0___default()(element);\n        return {\n            width: el.outerWidth(),\n            height: el.outerHeight()\n        };\n    };\n\n    return result;\n}\n\n// 对 x, y 两个参数为 left|center|right|%|px 时的处理，全部处理为纯数字\nfunction posConverter(pinObject) {\n    pinObject.x = xyConverter(pinObject.x, pinObject, 'width');\n    pinObject.y = xyConverter(pinObject.y, pinObject, 'height');\n}\n\n// 处理 x, y 值，都转化为数字\nfunction xyConverter(x, pinObject, type) {\n    // 先转成字符串再说！好处理\n    x = x + '';\n\n    // 处理 px\n    x = x.replace(/px/gi, '');\n\n    // 处理 alias\n    if (/\\D/.test(x)) {\n        x = x.replace(/(?:top|left)/gi, '0%')\n              .replace(/center/gi, '50%')\n              .replace(/(?:bottom|right)/gi, '100%');\n    }\n\n    // 将百分比转为像素值\n    if (x.indexOf('%') !== -1) {\n        //支持小数\n        x = x.replace(/(\\d+(?:\\.\\d+)?)%/gi, function(m, d) {\n            return pinObject.size()[type] * (d / 100.0);\n        });\n    }\n\n    // 处理类似 100%+20px 的情况\n    if (/[+\\-*\\/]/.test(x)) {\n        try {\n            // eval 会影响压缩\n            // new Function 方法效率高于 for 循环拆字符串的方法\n            x = (new Function('return ' + x))();\n        } catch (e) {\n            throw new Error('Invalid position value: ' + x);\n        }\n    }\n\n    // 转回为数字\n    return numberize(x);\n}\n\n// 获取 offsetParent 的位置\nfunction getParentOffset(element) {\n    var parent = element.offsetParent();\n\n    // IE7 下，body 子节点的 offsetParent 为 html 元素，其 offset 为\n    // { top: 2, left: 2 }，会导致定位差 2 像素，所以这里将 parent\n    // 转为 document.body\n    if (parent[0] === document.documentElement) {\n        parent = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body);\n    }\n\n    // 修正 ie6 下 absolute 定位不准的 bug\n    if (isIE6) {\n        parent.css('zoom', 1);\n    }\n\n    // 获取 offsetParent 的 offset\n    var offset;\n\n    if (parent[0] === document.body &&\n        parent.css('position') === 'static') {\n            offset = { top:0, left: 0 };\n    } else {\n        offset = getOffset(parent[0]);\n    }\n\n    // 根据基准元素 offsetParent 的 border 宽度，来修正 offsetParent 的基准位置\n    offset.top += numberize(parent.css('border-top-width'));\n    offset.left += numberize(parent.css('border-left-width'));\n\n    return offset;\n}\n\nfunction numberize(s) {\n    return parseFloat(s, 10) || 0;\n}\n\nfunction toElement(element) {\n    return jquery__WEBPACK_IMPORTED_MODULE_0___default()(element)[0];\n}\n\nfunction getOffset(element) {\n    var box = element.getBoundingClientRect(),\n        docElem = document.documentElement;\n\n    // < ie8 不支持 win.pageXOffset, 则使用 docElem.scrollLeft\n    return {\n        left: box.left + (window.pageXOffset || docElem.scrollLeft) -\n              (docElem.clientLeft || document.body.clientLeft  || 0),\n        top: box.top  + (window.pageYOffset || docElem.scrollTop) -\n              (docElem.clientTop || document.body.clientTop  || 0)\n    };\n}\n\n\n//# sourceURL=webpack://Umc/./src/components/utility/position.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar Overlay = __webpack_require__(/*! ./components/overlay */ \"./src/components/overlay/index.js\").default\n__webpack_require__(/*! ./components/overlay/mask */ \"./src/components/overlay/mask.js\")\n\nmodule.exports = {\n  Overlay: Overlay\n}\n\n\n//# sourceURL=webpack://Umc/./src/index.js?");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_jquery__;\n\n//# sourceURL=webpack://Umc/external_%22jQuery%22?");

/***/ })

/******/ });
});